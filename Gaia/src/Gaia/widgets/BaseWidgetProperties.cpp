///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include "Gaia/widgets/BaseWidgetProperties.h"
#include "Gaia/widgets/BaseWidget.h"
#include "Gaia/tools/Tools.h"

namespace gaia
{
namespace properties
{
//struct my_toLower
//{ 
//    char operator()(char c) const 
//    {
//        return std::tolower(static_cast<unsigned char>(c));
//    } 
//};

////=============================================================================
/////////////////////////////////////////////////////////////////////////////////
//void isTrueValue(const std::string& value)
//{
//	std::string val2 = value;
//	std::transform(val2.begin(), val2.end(), val2.begin(), my_toLower());
//
//	return (value == "true" || value == "1");
//}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseVisible::BaseVisible(const std::string& nom)
:Property(nom)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseVisible::setProperty(BaseWidget& target, const std::string& value)
{
	target.setVisible(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseModal::BaseModal(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseModal::setProperty(BaseWidget& target, const std::string& value)
{
	target.setModal(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseOpaque::BaseOpaque(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseOpaque::setProperty(BaseWidget& target, const std::string& value)
{
	target.setOpaque(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseFocusable::BaseFocusable(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseFocusable::setProperty(BaseWidget& target, const std::string& value)
{
	target.setFocusable(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseEnable::BaseEnable(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseEnable::setProperty(BaseWidget& target, const std::string& value)
{
	target.setEnabled(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseEnableDoubleClick::BaseEnableDoubleClick(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseEnableDoubleClick::setProperty(BaseWidget& target, const std::string& value)
{
	target.enableDoubleClick(tools::stringToBool(value));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//=============================================================================
///////////////////////////////////////////////////////////////////////////////
BaseFocus::BaseFocus(const std::string& name)
:Property(name)
{
}

//=============================================================================
///////////////////////////////////////////////////////////////////////////////
void BaseFocus::setProperty(BaseWidget& target, const std::string& value)
{
	target.requestFocus(tools::stringToBool(value));
}

} //end namespace property

} //end namespace
